
  // create the svg area
  var svg = d3.select("#my_dataviz")
      .append("svg")
      .attr("width", 1000)
      .attr("height", 1000)
      .append("g")
      .attr("transform", "translate(500,500)")

  // matrix of input data, pulled from python
  var matrix = [
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5606,1267,224,0,0,42,169,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6022,279,275,0,0,14,147,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1399,3416,555,0,0,95,84,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,194,25,149,1246,1182,420,7,17,2],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1261,235,34,0,0,3,17,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1266,212,21,0,0,3,21,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1045,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,816,150,38,0,0,0,36,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,386,132,90,0,0,0,47,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,144,152,0,0,4,2,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,38,313,0,0,142,16,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,328,78,7,0,0,3,6,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,87,58,0,0,0,4,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,181,126,4,0,0,10,5,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,41,2,0,0,0,10,0,0],
    [5606,6022,1399,194,1261,1266,0,816,386,216,1,328,200,181,208,0,0,0,0,0,0,0,0,0],
    [1267,279,3416,25,235,212,0,150,132,144,38,78,87,126,41,0,0,0,0,0,0,0,0,0],
    [224,275,555,149,34,21,1045,38,90,152,313,7,58,4,2,0,0,0,0,0,0,0,0,0],
    [0,0,0,1246,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,1182,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [42,14,95,420,3,3,0,0,0,4,142,3,0,10,0,0,0,0,0,0,0,0,0,0],
    [169,147,84,7,17,21,0,36,47,2,16,6,4,5,10,0,0,0,0,0,0,0,0,0],
    [0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
  ];

  var matrix = [
    [0,0,0,0,0,0,0,0,0,0,0,0,0,5606,1267,224,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,6022,279,275,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,1399,3416,555,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,194,25,149,1246,1182],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,1261,235,34,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,1266,212,21,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,816,150,38,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,386,132,90,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,216,144,152,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,328,78,7,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,200,87,58,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,181,126,4,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,208,41,2,0,0],
    [5606,6022,1399,194,1261,1266,816,386,216,328,200,181,208,0,0,0,0,0],
    [1267,279,3416,25,235,212,150,132,144,78,87,126,41,0,0,0,0,0],
    [224,275,555,149,34,21,38,90,152,7,58,4,2,0,0,0,0,0],
    [0,0,0,1246,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,1182,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  ];

  var matrix = [
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,5,744,2,1,0,3,1,0,2,1,0,0,1,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,517,2,1,80,0,0,110,0,0,7,2,1,1,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,572,4,9,1,0,0,16,14,1,0,3,2,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,573,7,8,3,0,0,1,9,0,0,1,6,0,1],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,368,6,5,5,1,0,4,21,4,0,1,6,0,2],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,283,7,13,1,0,0,4,2,5,6,1,3,2,1],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,321,6,1,13,4,0,4,2,2,1,1,1,2,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,4,5,11,2,0,17,2,2,6,0,3,1,1,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,194,0,3,17,0,0,31,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,198,9,4,1,0,0,1,5,0,1,0,1,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,184,0,5,3,1,0,0,2,3,0,0,8,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,10,2,11,8,5,8,0,11,9,8,19,5,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,183,0,0,4,0,0,5,7,5,1,1,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,181,0,2,3,2,0,2,1,0,1,0,0,0,2,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,2,76,0,0,1,0,0,1,1,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,127,0,0,0,0,1,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,0,1,10,0,0,9,0,0,1,0,1,2,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,2,0,4,0,0,4,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,3,11,8,0,0,1,0,0,1,0,0,1,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,2,0,83,1,1,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,3,4,3,0,0,0,1,1,30,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,71,0,1,0,0,0,0,0,1,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,2,2,21,2,1,10,5,12,0,6,0,0,0,1],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,0,1,13,0,0,39,0,0,3,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,1,1,2,1,0,1,22,0,0,2,0,1,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,2,51,0,1,0,1,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,1,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,0,1,0,0,1,0,0,22,0,0,0,0,1],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,2,3,4,0,0,0,0,0,1,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,0,0,6,0,3,22,0,0,2,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,20,0,0,12,0,1,0,0,0,0,1],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,3,1,1,1,2,4,6,1,2,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,7,0,0,0,0,2,2,0,0,0,0,11,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,1,3,1,0,0,1,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,2,1,0,0,0,2,0,1,1,0,1,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,3,0,0,0,0,3,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,8,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,2,0,0,1,0,0,2,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,1,0,2,0,2,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,1,0,0,0,0,0,0,0,0,0,1,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,6],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,1,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,1,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,1,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[23,517,22,28,74,75,321,230,2,21,17,116,183,181,84,0,94,94,65,2,39,5,5,5,30,1,44,19,33,5,4,14,10,22,19,20,0,8,5,4,6,0,7,0,2,2,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[5,2,572,573,368,283,6,4,0,198,184,10,0,0,0,1,0,2,3,1,3,71,2,1,1,0,0,0,2,1,0,3,0,1,2,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[744,1,4,7,6,7,1,5,0,9,0,2,0,2,2,0,1,0,11,0,4,0,2,0,1,0,0,0,3,0,0,1,7,3,1,3,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[2,80,9,8,5,13,13,11,2,4,5,11,4,3,76,1,10,4,8,2,3,1,21,1,2,1,0,1,4,0,1,1,0,1,0,0,0,8,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[1,0,1,3,5,1,4,2,194,1,3,8,0,2,0,0,0,0,0,0,0,0,2,13,1,0,0,0,0,6,20,1,0,0,0,0,0,0,0,2,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,1,0,0,0,0,0,1,5,0,0,0,127,0,0,0,83,0,0,1,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[3,110,0,0,0,0,4,17,3,0,0,8,5,2,1,0,9,4,1,1,0,0,10,0,1,1,0,1,0,3,0,4,0,1,2,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[1,0,16,1,4,4,2,2,17,1,0,0,7,1,0,0,0,0,0,1,1,0,5,39,22,2,0,0,0,22,12,6,2,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,14,9,21,2,2,2,0,5,2,11,5,0,0,0,0,0,0,0,1,0,12,0,0,51,1,0,0,0,0,1,2,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[2,7,1,0,4,5,1,6,0,0,3,9,1,1,1,0,1,0,1,0,30,1,0,0,0,0,0,22,1,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[1,2,0,0,0,6,1,0,31,1,0,8,1,0,1,1,0,0,0,0,0,0,6,3,2,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,1,3,1,1,1,1,3,0,0,0,19,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,1,2,6,6,3,2,1,0,1,8,5,0,0,0,0,2,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[1,0,0,0,0,2,0,1,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  ];


  // names that correspond to the rows of the input matrix
  var names = ['SAS', 'Wharton', 'PSoM', 'Unaffiliated', 'Nursing', 'SEAS', 'Library',
	       'GSE', 'Law', 'Vet', 'Other', 'Design', 'Annenberg', 'Dental', 'SP2',
	       'Student', 'Faculty', 'Staff', 'Research', 'Medical', 'Courtesy',
	       'Temporary Staff', 'Visitors', 'Adjunct Faculty'];

  var names = ['SAS', 'Wharton', 'PSoM', 'Unaffiliated', 'Nursing', 'SEAS',
	       'GSE', 'Law', 'Vet', 'Design', 'Annenberg', 'Dental', 'SP2',
	       'Student', 'Faculty', 'Staff', 'Research', 'Medical'];

  var names = ['lynn', 'browndeb', 'bmarcell', 'mtrow', 'dicksonp', 'kevinat', 'okrent', 'cobine', 'rjame', 'kirstien', 'croninkc', 'wellere', 'milaur', 'stuhrreb', 'lizavick', 'mlindem', 'vivier', 'samkirk', 'rmendel', 'dcrand', 'smrob', 'mbowie', 'amankaur', 'campbell', 'mcedrone', 'dmcgee', 'currano', 'pguar', 'hkhughes', 'dmanuel', 'varvarak', 'kenwhi', 'larrivee', 'mayelinp', 'jfpierce', 'azzolina', 'krawson', 'christal', '10026442', 'mjanz', 'ahnberg', 'laurelg', 'ameaghan', 'mollyk', 'anonymous', '67141379', 'sarnoa', 'lexivoss', 'sreidell', 'browndeb; wellere', 'Arts & Sciences', 'Wharton', 'GSE', 'N/A', 'Nursing', 'Vet', 'Penn-Other', 'PSOM', 'SEAS', 'Design', 'Medical', 'Annenberg', 'Law', 'SP2', 'Dental'];
  // Method to create n + 1 colors in a rainbow
  // d3.interpolateRainbow(float) - function takes a float 0-1 and returns a color
  // d3.quantize(interpolator, n) - function that returns an array of n samples from interpolator
  colors = d3.quantize(d3.interpolateRainbow, names.length+1)

  // give this matrix to d3.chord(): it will calculates all the info we need to draw arc and ribbon
  var res = d3.chord()
      .padAngle(0.05)     // padding between entities (black arc)
      .sortSubgroups(d3.descending)(matrix)

  // Creates a group object to update
  group = svg
  .datum(res)
  .append("g")
  .selectAll("g")
  .data(function(d) { return d.groups; })
  .enter()

  // Makes the outer ring
  group.append("g")
  .append("path")
  .style("fill", d => colors[d.index] )
  .style("stroke", "black")
  .attr("d", d3.arc()
	.innerRadius(200)
	.outerRadius(210)
       )

  group
   .append("text")
   .each(d => (d.angle = (d.startAngle + d.endAngle) / 2)) // another way to write a function?
   .attr("dy", "0.35em")
   .attr("transform", d => `
         rotate(${(d.angle * 180 / Math.PI - 90)})
         translate(215)
         ${d.angle > Math.PI ? "rotate(180)" : ""}
       `) // rotates text, then translates it outside the group, then flips the text around if necessary
   .attr("text-anchor", d => d.angle > Math.PI ? "end" : null) // Anchor textbox at end or beginning
   .text(d => names[d.index])

  // Add the links between groups
  svg
  .datum(res)
  .append("g")
  .selectAll("path")
  .data(function(d) { return d; })
  .enter()
  .append("path")
  .attr("d", d3.ribbon()
	.radius(200)
       )
  .style("fill", function(d) { return colors[d.source.index] }) // colors can come from source or target
  .style("stroke", "black")
  .style("opacity", 0.5);
